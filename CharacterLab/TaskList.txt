The BUILDLAYER project.			16Dec99

Allen;

I've gone through BuildLayer1.pas and added a ton of comments, and expanded the
sample code a bit. The comments in the code are fairly specific to the
functionality that I'm seeking. So I'll use this document more for remarks about
the process/tools of making the program.

{--------- OUTLINE OF PROJECT ---------}

The object of the program is this:

*) Load a bunch of GIFs that contain "wardrobe" images that can be used to dress
our basic NakedMan for actual use in the game.

*) Sort the wardrobe into various Layer groupings under Tab control so that
the user can easily see how things will be applied to the output character.

*) Let the user edit the Layers to which the items belong.

*) Let the user dress NakedMan in nearly any combination of wardrobe items.
There are some basic rules to follow in this process:

 +> Only one wardrobe item under each Layer tab can be applied at a time.
 +> Since there are currently 14 Layer tabs, then NakedMan can be dressed in
     no more than a grand total of 14 wardrobe items at one time.
 +> Each wardrobe item can be applied only once, regardless of how many tabs
     offer that wardrobe item.
 +> Not every Layer tab has to be painting something on our NakedMan, but I
     would like to require that the user put at least ANY 2 wardrobe items on
     him before allowing the creation of an output GIF.

*) After a first working version of BuildLayer has been submitted to the art
guys, we'll come back and add a feature for color adjusting the appearance of
select wardrobe items. This will allow the creation of a large assortment of
looks with simple chroma tuning (e.g. one light gray shirt can be a whole
rainbow of shirts with simple chroma manipulation).

*) Once NakedMan (or NakedWoman depending on the current character) has been
properly dressed, allow the user to Make an output file. Actually 2 files are
made, a text INI describing how the character is dressed, and a new GIF file
of the fully animated fully dressed character with the new INI data embedded.

I've provided a very simple outline of the program with BuildLayer1.pas, but
don't feel constrained from using your own creativity to craft the
best solution.


{--------- GDI HANDLE ISSUES ---------}

In my minimal efforts to get this project started I found that I was encountering
the same problems that Matt had with our chapter editor, and that Steven had
with our game engine. Simply that Windows is very limited in its ability to
handle large collections of images (limited GDI handles).

 [[ GIFCode ]]

Steven's solution, in part, is based on his GIFCode.pas file that I've used. It
receives a GIf file name, loads the whole file into a memory stream and can
"render" the images off to a single big TBitmap image so that you can pack
bunches of animation frames under a single GDI graphic handle. At this point
you have 2 copies of the image in memory, the GIF stream, and the TBitmap. My
only concern with GIFCode is that it is a "focused purpose" tool that does its
job well, but isn't a full solution to what is needed in BuildLayer. I'm not sure
how much work would be involved to be able to manipulate the INI data in the
GIF text comment block, and to save the dressed character to disk as a GIF file
with this solution.

 [[ ImageManager ]]

Matt's solution, in part, is based on the Freeware package called GIFImage. I
asked Matt to try to use GIFImage because it seems a fairly broad purpose tool
that covers a number of nice features of the GIF89a standard. Building on
GIFImage, Matt created a package called ImageManager. I had already reached a
stopping point in my own work with BuildLayer by the time I got this program
from Matt, so I've not done ANY coding/testing of this solution or its merits
compared to Steven's GIFCode. I'll send you Matt's ImageManagerDemo to show you
how to use his system so that you can evaluate it for yourself. What I've
noticed from Matt's demo is that his package has some really nice features, but
it was designed to pick out just the first frame from each animated GIF, instead
of collecting the whole set of animated frames (he uses it to create a tool
palette in his software, since the Chapter Editor never has to show how sprites
are animated). Matt does automate some of the image management stuff, and since
his package is built upon the GIFImage utility, it should have ways to do
anything needed with any GIF file without much need for new code.

 -- Therefore, the first decision you'll need to make is which foundation you'll
 use for building this project, GIFCode or ImageManager. Both Steven and Matt
 are available to answer any questions, and we'll all gladly do whatever we can
 to help get you going with this first task.


{--------- GIF/INI DATA ISSUE ---------}

I've used the Windows INI data format for the text information that we need to
pack inside the GIF files because it is a "standard," and more importantly
because I wanted to offload the parsing tasks to Windows/Delphi internal code so
that there was one less thing that had to be coordinated between multiple
programmers. However, that selection has had some unfortunate consequences. We
messed around with trying to get the GIF comment block stuffed into the TIniFile
before I noticed the TMemIniFile. This "seems" like it should provide us with
an easy in-memory solution to handling our GIF/INI text data, but again it popped
up just when we all were pressed for other deadlines - so no progress has been
made with this. BuildLayer needs full read/write access to the GIF/INI data, so
you'll need to work this out. I'd like a clean generic/modular solution so that
I can give it to both Matt and Steven and ask them to put the same unit in their
respective programs so we can be done with this whole consideration.

You'll see an email message below from Anders Melander, the author of GIFImage,
about what he presumes will be a simple way to hook TMemIniGile into GIFImage.
Like all such things, I suspect it won't be quite that simple. But at least
this should be a good starting point.

 -- Therefore, I need you to work out the TMemInifile issue so that we all have
 a good clean solution, and BuildLayer can move forward.


{--------- CORRUPT GIF/INI DATA ---------}

I am a big proponent of "buy components off the shelf if it is cheaper than
rolling your own from scratch," (and NOTHING we build is cheaper than freeware
if the freeware tool really does the job and includes source) but it can be hard
to get proud programmers to break out of the "Not Made Here" syndrom. I was almost
ready to insist that GIFImage be our company standard tool for all GIF
interaction when I got the email below from GIFImage's author that he uncovered
a bug in its handling of the text comment block where we are storing the INI
formatted information. So that's just another setback. The bad news is that
you've arrived while we are in the very middle of dealing with the problem
this has caused. All the sample GIF files I gave you have the bad format INI data.
However, all of our code is currently based on that bad format as well, so we
basically work as desired. However, in the next few days I'm reprocessing
everything to correct this subtle data corruption, and we're changing all our
code to comply with the fix.

I've given you the information below on how to fix the corruption, but I am not
ready to give you fixed GIF files yet. So you'll need to work with the bad data
for a while, then when we are all ready we'll make the switch to uncorrupt files
and related codes. It sounds confusing, but it shouldn't be too big of a deal
with a little precaution.

 -- Therefore, I need you to be aware of this GIF/INI text data corruption since
 we'll be making the switch while you are in the midst of finishing BuildLayer.


{--------- GETTING STARTED ---------}

I hope I've given you everything that you need to get started. DO call/email/drop-in
if you have ANY questions. THANKS!!!


Visit this site to download most installation package for most current version
of GIFImage
http://www.melander.dk/delphi/gifimage/

After getting the download, note these corrections sent to me by the author of
GIFImage:

>>>>>>>>>>----------<<<<<<<<<<

From: "Anders Melander" <anders@melander.dk>
To: "James R. Shiflett" <JamesS@digital-tome.com>
Subject: Re: GifImage project
Date: Saturday, December 11, 1999 6:54 PM

James,

I forgot to mention that I have found a severe bug which affects
comment and text extensions. The bug causes TGIFImage to insert
CR/LFs after each sub block in comment and text extensions on input
and to treat sub blocks as CR/LF delimited on input. The bug is
invissible as long as TGIFImage is used for I/O, but will surface if
other applications are used (e.g. write GIF with TGIFImage, read with
PaintShop).


Replace the following two functions in gifimage.pas to fix the bug:

(*
**  Write a string list to a stream as multiple blocks
**  of max 255 characters in each.
*)
procedure WriteStrings(Stream: TStream; Strings: TStrings);
var
  b			: BYTE;
  Size			: integer;
  s			: string;
  p			: PChar;
begin
  s := Strings.Text;
  Size := length(s);
  p := PChar(s);
  while (Size > 0) do
  begin
    if (Size > 255) then
      b := 255
    else
      b := size;
    WriteByte(Stream, b);
    Stream.Write(p^, b);
    inc(p, b);
    dec(Size, b);
  end;
  // Terminating zero (length = 0)
  WriteByte(Stream, 0);
end;


(*
**  Read a string list from a stream as multiple blocks
**  of max 255 characters in each.
*)
{ TODO -oanme -cImprovement : Replace ReadStrings with TGIFReader. }
procedure ReadStrings(Stream: TStream; Strings: TStrings);
var
  size			: BYTE;
  buf			: array[0..255] of char;
  s			: string;
begin
  Strings.Clear;
  if (Stream.Read(size, 1) <> 1) then
    exit;
  while (size > 0) do
  begin
    ReadCheck(Stream, buf, size);
    buf[size] := #0;
    AppendStr(s, buf);
    if (Stream.Read(size, 1) <> 1) then
      break;
  end;
  Strings.Text := s;
end;

Unfortunately the bug means that all your existing comments are
formatted incorrectly. To fix the existing GIFs, you will have to
read them using the old (and buggy ReadStrings) and then write them
using the fixed WriteStrings.


---

DIXI

+------------------------+----------------------------+
|  Anders Bo Melander    | mailto:anders@melander.dk  |
|  Denmark               | http://www.melander.dk     |
+------------------------+----------------------------+

>>>>>>>>>>----------<<<<<<<<<<

Allen, all the GIF files I provided to you in the Demo\Resource path on the ZIP
drive were created with the bad/old version of GIFIMAGE. We have all the source
BMP and INI files, so we are soon going to simply rebuild all our GIF's from
scratch (our BMPWORK tool has a 'batch' mode) to repair the contents. However,
for now the GIFs you have do contain this problem. For development purposes I'd
suggest not applying the above fix yet so that you can read the files, get your
code working, then when you are ready make a little "fixup" program that reads
all the GIFs with the old ReadStrings and writes them back out with the fixed
WriteStrings. Then you can make a fully fixed version of GIFImage for all future
use and your GIFs will contain valid data. Alternatively, just use the bad code
until I've rebuilt all the GIFs we have here, then bring by your ZIP cartridge
and let me give you a whole set of fixed GIFs to use as you apply the above code
fix.



>>>>>>>>>>----------<<<<<<<<<<

From: "Anders Melander" <anders@melander.dk>
To: "James R. Shiflett" <JamesS@digital-tome.com>
Subject: Re: GifImage project
Date: Saturday, December 11, 1999 6:47 PM

James,

> If you could give us the same ability to treat the embedded INI
> data as a TMemIniFile directly from the contents of the GIF file
> that would be helpful.

Why don't you just do like this (not tested):

var
  IniFile: TMemIniFile;
  GIF: TGIFImage;
begin
  GIF := TGIFImage.Create;
  try
    GIF.LoadFromFile('xxx.gif');
    IniFile := TMemIniFile.Create('');
    try
      IniFile.SetStrings(
        TGIFCommentExtension(GIF.Images[0].Extensions[0]).Text);
      ... do something with ini file here...
    finally
      IniFile.Free;
    end;
  finaly
    GIF.Free;
  end;
end;

Accordingly, you can use TMemIniFile.GetStrings to populate
TGIFCommentExtension from the TMemIniFile contents.


---

DIXI

+------------------------+----------------------------+
|  Anders Bo Melander    | mailto:anders@melander.dk  |
|  Denmark               | http://www.melander.dk     |
+------------------------+----------------------------+


>>>>>>>>>>----------<<<<<<<<<<
